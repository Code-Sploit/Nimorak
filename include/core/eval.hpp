#pragma once

#include <tables/constants.hpp>

namespace Nimorak {
    class Game; // forward declaration
}

namespace Evaluation {

    class Worker {
        private:
            enum GamePhase {
                OPENING,
                MIDDLEGAME,
                ENDGAME
            };

            struct PieceSquareTable {
                int openingValue[64];
                int middlegameValue[64];
                int endgameValue[64];
            };

            static constexpr Bitboard FILE_MASKS[8] = {
                0x0101010101010101ULL,
                0x0202020202020202ULL,
                0x0404040404040404ULL,
                0x0808080808080808ULL,
                0x1010101010101010ULL,
                0x2020202020202020ULL,
                0x4040404040404040ULL,
                0x8080808080808080ULL
            };

            static constexpr int mirror[64] = {
                56,57,58,59,60,61,62,63,
                48,49,50,51,52,53,54,55,
                40,41,42,43,44,45,46,47,
                32,33,34,35,36,37,38,39,
                24,25,26,27,28,29,30,31,
                16,17,18,19,20,21,22,23,
                8, 9,10,11,12,13,14,15,
                0, 1, 2, 3, 4, 5, 6, 7
            };

            static constexpr int pieceValues[6] = {0, 100, 320, 335, 500, 900};

            static constexpr PieceSquareTable pieceSquareTables[6] = {
                {
                    {
                         0,  0,  0,  0,  0,  0,  0,  0,
                        50, 50, 50, 50, 50, 50, 50, 50,
                        10, 10, 20, 30, 30, 20, 10, 10,
                        5,  5, 10, 25, 25, 10,  5,  5,
                        0,  0,  0, 20, 20,  0,  0,  0,
                        5, -5,-10,  0,  0,-10, -5,  5,
                        5, 10, 10,-40,-40, 10, 10,  5,
                        0,  0,  0,  0,  0,  0,  0,  0
                    },
                    {
                         0,  0,  0,  0,  0,  0,  0,  0,
                        50, 50, 50, 60, 60, 50, 50, 50,
                        10, 10, 30, 55, 55, 30, 10, 10,
                        5,  5, 15, 50, 50, 15,  5,  5,
                        0,  0,  0, 40, 40,  0,  0,  0,
                        5, -5,-10,  0,  0,-10, -5,  5,
                        5, 10, 10,-20,-20, 10, 10,  5,
                        0,  0,  0,  0,  0,  0,  0,  0
                    },
                    {
                         0,  0,  0,  0,  0,  0,  0,  0,
                        90, 90, 90, 90, 90, 90, 90, 90,
                        50, 50, 50, 50, 50, 50, 50, 50,
                        30, 30, 30, 30, 30, 30, 30, 30,
                        10, 10, 10, 10, 10, 10, 10, 10,
                        -10, -10, -10, -10, -10, -10, -10, -10,
                        -20, -20, -20, -20,-20, -20, -20, -20,
                        0,  0,  0,  0,  0,  0,  0,  0
                    }
                },
                {
                    {
                        -50,-40,-30,-30,-30,-30,-40,-50,
                        -40,-20,  0,  0,  0,  0,-20,-40,
                        -30,  0, 10, 15, 15, 10,  0,-30,
                        -30,  5, 15, 20, 20, 15,  5,-30,
                        -30,  0, 15, 20, 20, 15,  0,-30,
                        -30,  5, 10, 15, 15, 10,  5,-30,
                        -40,-20,  0,  5,  5,  0,-20,-40,
                        -40,-20,-30,-30,-30,-30,-20,-40,
                    },
                    {
                        -50,-40,-30,-30,-30,-30,-40,-50,
                        -40,-20,  0,  0,  0,  0,-20,-40,
                        -30,  0, 10, 15, 15, 10,  0,-30,
                        -30,  5, 15, 20, 20, 15,  5,-30,
                        -30,  0, 15, 20, 20, 15,  0,-30,
                        -30,  5, 10, 15, 15, 10,  5,-30,
                        -40,-20,  0,  5,  5,  0,-20,-40,
                        -50,-40,-30,-30,-30,-30,-40,-50,
                    },
                    {
                        -50,-40,-30,-30,-30,-30,-40,-50,
                        -40,-20,  0,  0,  0,  0,-20,-40,
                        -30,  0, 10, 15, 15, 10,  0,-30,
                        -30,  5, 15, 20, 20, 15,  5,-30,
                        -30,  0, 15, 20, 20, 15,  0,-30,
                        -30,  5, 10, 15, 15, 10,  5,-30,
                        -40,-20,  0,  5,  5,  0,-20,-40,
                        -50,-40,-30,-30,-30,-30,-40,-50,
                    }
                },
                {
                    {
                        -20,-10,-10,-10,-10,-10,-10,-20,
                        -10,  0,  0,  0,  0,  0,  0,-10,
                        -10,  0,  5, 10, 10,  5,  0,-10,
                        -10,  5,  5, 10, 10,  5,  5,-10,
                        -10,  0, 10, 10, 10, 10,  0,-10,
                        -10, 10, 10, 10, 10, 10, 10,-10,
                        -10,  5,  0,  0,  0,  0,  5,-10,
                        -20,-10,-10,-10,-10,-10,-10,-20,
                    },
                    {
                        -20,-10,-10,-10,-10,-10,-10,-20,
                        -10,  0,  0,  0,  0,  0,  0,-10,
                        -10,  0,  5, 10, 10,  5,  0,-10,
                        -10,  5,  5, 10, 10,  5,  5,-10,
                        -10,  0, 10, 10, 10, 10,  0,-10,
                        -10, 10, 10, 10, 10, 10, 10,-10,
                        -10,  5,  0,  0,  0,  0,  5,-10,
                        -20,-10,-10,-10,-10,-10,-10,-20,
                    },
                    {
                        -20,-10,-10,-10,-10,-10,-10,-20,
                        -10,  0,  0,  0,  0,  0,  0,-10,
                        -10,  0,  5, 10, 10,  5,  0,-10,
                        -10,  5,  5, 10, 10,  5,  5,-10,
                        -10,  0, 10, 10, 10, 10,  0,-10,
                        -10, 10, 10, 10, 10, 10, 10,-10,
                        -10,  5,  0,  0,  0,  0,  5,-10,
                        -20,-10,-10,-10,-10,-10,-10,-20,
                    }
                },
                {
                    {
                        0,  0,  0,  0,  0,  0,  0,  0,
                        5, 10, 10, 10, 10, 10, 10,  5,
                        -5,  0,  0,  0,  0,  0,  0, -5,
                        -5,  0,  0,  0,  0,  0,  0, -5,
                        -5,  0,  0,  0,  0,  0,  0, -5,
                        -5,  0,  0,  0,  0,  0,  0, -5,
                        -5,  0,  0,  0,  0,  0,  0, -5,
                        0,  0,  0,  5,  5,  0,  0,  0
                    },
                    {
                        0,  0,  0,  0,  0,  0,  0,  0,
                        5, 20, 20, 20, 20, 20, 20,  5,
                        -5,  0,  0,  0,  0,  0,  0, -5,
                        -5,  0,  0,  0,  0,  0,  0, -5,
                        -5,  0,  0,  0,  0,  0,  0, -5,
                        -5,  0,  0,  0,  0,  0,  0, -5,
                        -5,  0,  0,  0,  0,  0,  0, -5,
                        0,  0,  0,  5,  5,  0,  0,  0
                    },
                    {
                        0,  0,  0,  0,  0,  0,  0,  0,
                        15, 30, 30, 30, 30, 30, 30, 15,
                        -5,  0,  0,  0,  0,  0,  0, -5,
                        -5,  0,  0,  0,  0,  0,  0, -5,
                        -5,  0,  0,  0,  0,  0,  0, -5,
                        -5,  0,  0,  0,  0,  0,  0, -5,
                        -5,  0,  0,  0,  0,  0,  0, -5,
                        0,  0,  0,  5,  5,  0,  0,  0
                    }
                },
                {
                    {
                        -20,-10,-10, -5, -5,-10,-10,-20,
                        -10,  0,  0,  0,  0,  0,  0,-10,
                        -10,  0,  5,  5,  5,  5,  0,-10,
                        -5,  0,  5,  5,  5,  5,  0, -5,
                        0,  0,  5,  5,  5,  5,  0, -5,
                        -10,  5,  5,  5,  5,  5,  0,-10,
                        -10,  0,  5,  0,  0,  0,  0,-10,
                        -20,-10,-10, -5, -5,-10,-10,-20
                    },
                    {
                        -20,-10,-10, -5, -5,-10,-10,-20,
                        -10,  0,  0,  0,  0,  0,  0,-10,
                        -10,  0,  5,  5,  5,  5,  0,-10,
                        -5,  0,  5,  5,  5,  5,  0, -5,
                        0,  0,  5,  5,  5,  5,  0, -5,
                        -10,  5,  5,  5,  5,  5,  0,-10,
                        -10,  0,  5,  0,  0,  0,  0,-10,
                        -20,-10,-10, -5, -5,-10,-10,-20
                    },
                    {
                        -20,-10,-10, -5, -5,-10,-10,-20,
                        -10,  0,  0,  0,  0,  0,  0,-10,
                        -10,  0,  5,  5,  5,  5,  0,-10,
                        -5,  0,  5,  5,  5,  5,  0, -5,
                        0,  0,  5,  5,  5,  5,  0, -5,
                        -10,  5,  5,  5,  5,  5,  0,-10,
                        -10,  0,  5,  0,  0,  0,  0,-10,
                        -20,-10,-10, -5, -5,-10,-10,-20
                    }
                },
                {
                    {
                        -30,-40,-40,-50,-50,-40,-40,-30,
                        -30,-40,-40,-50,-50,-40,-40,-30,
                        -30,-40,-40,-50,-50,-40,-40,-30,
                        -30,-40,-40,-50,-50,-40,-40,-30,
                        -20,-30,-30,-40,-40,-30,-30,-20,
                        -10,-20,-20,-20,-20,-20,-20,-10,
                        20, 20,  0,  0,  0,  0, 20, 20,
                        20, 30, 10,  0,  0, 10, 30, 20
                    },
                    {
                        -30,-40,-40,-50,-50,-40,-40,-30,
                        -30,-40,-40,-50,-50,-40,-40,-30,
                        -30,-40,-40,-50,-50,-40,-40,-30,
                        -30,-40,-40,-50,-50,-40,-40,-30,
                        -20,-30,-30,-40,-40,-30,-30,-20,
                        -10,-20,-20,-20,-20,-20,-20,-10,
                        20, 20,  0,  0,  0,  0, 20, 20,
                        20, 30, 10,  0,  0, 10, 30, 20
                    },
                    {
                        -50,-40,-30,-20,-20,-30,-40,-50,
                        -30,-20,-10,  0,  0,-10,-20,-30,
                        -30,-10, 20, 30, 30, 20,-10,-30,
                        -30,-10, 30, 40, 40, 30,-10,-30,
                        -30,-10, 30, 40, 40, 30,-10,-30,
                        -30,-10, 20, 30, 30, 20,-10,-30,
                        -30,-30,  0,  0,  0,  0,-30,-30,
                        -50,-30,-30,-30,-30,-30,-30,-50
                    }
                }
            };  

            int getPSTFor(PieceType type, int square, GamePhase phase);
            int getMobilityScoreFor(Nimorak::Game& game, PieceType type, int square);

            GamePhase getGamePhase(Nimorak::Game& game);

            Bitboard getForwardPawnMask(int square, int color);
            Bitboard getIsolatedPawnMask(int square);
            Bitboard getPassedPawnMask(int square, int color);

        public:
            int eval = 0; // Last evaluation score

            // Evaluation modules
            void moduleMaterial(Nimorak::Game& game);
            void modulePST(Nimorak::Game& game);
            void moduleMobility(Nimorak::Game& game);

            // Evaluate the current position
            int evaluate(Nimorak::Game& game);
    };

} // namespace Evaluation